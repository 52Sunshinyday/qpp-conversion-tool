version: 2
container_config: &container_config
  docker:
    - image: circleci/openjdk:8-jdk-browsers
  working_directory: /home/circleci/qpp-conversion-tool

jobs:
  checkout:
    <<: *container_config
    steps:
      - checkout
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - qpp-conversion-tool

  build:
    <<: *container_config
    environment:
      MAVEN_OPTS: "-Xms7G -Xmx7G"
    resource_class: large
    steps:
      - attach_workspace:
          at: /home/circleci
      - run: wget -O sonarscanner.zip https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.0.1.733.zip
      - run: unzip -d . sonarscanner.zip
      - run: cp ./sonar-scanner.properties sonar-scanner-3.0.1.733/conf/sonar-scanner.properties
      - run: mvn --batch-mode clean verify
      - run: curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
      - run: sudo apt-get install -y nodejs
      - run: ./tools/bin/sonarqube.sh
      - run:
          name: Creating artifacts
          command: |
            ARTIFACT_DIR=/tmp/artifacts;
            mkdir $ARTIFACT_DIR;
            cp converter/target/converter.jar $ARTIFACT_DIR;
            cp commandline/target/commandline.jar $ARTIFACT_DIR;
            cp rest-api/target/rest-api.jar $ARTIFACT_DIR;
            mkdir -p $ARTIFACT_DIR/coverage/converter;
            cp -R converter/target/site/jacoco $ARTIFACT_DIR/coverage/converter;
            mkdir -p $ARTIFACT_DIR/coverage/rest-api;
            cp -R rest-api/target/site/jacoco $ARTIFACT_DIR/coverage/rest-api;
            mkdir -p ARTIFACT_DIR/coverage/commandline;
            cp -R rest-api/target/site/jacoco $ARTIFACT_DIR/coverage/commandline;

      - store_artifacts:
          path: /tmp/artifacts

  deploy_api:
    <<: *container_config
    working_directory: /home/circleci/qpp-conversion-tool
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: Check for docker
          command: |
            docker -v;
            if [ $? -ne 0 ]; then
               apt-get -qq update
               apt install -yqq wget python curl lsb-release software-properties-common
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
               add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
               apt update && apt upgrade
               apt-cache search docker-ce
               apt-get install -yqq docker-ce
               wget -O get-pip.py https://bootstrap.pypa.io/get-pip.py
               python get-pip.py
               pip install ansible
            fi
      - run: ./tools/bin/docker_deploy.sh

  integration_test:
    <<: *container_config
    steps:
      - attach_workspace:
          at: /home/circleci
      - run: mvn clean test -DfailIfNoTests=false -Dtest=*ApiAcceptance*

  ui_test:
    <<: *container_config
    docker:
      - image: circleci/node:7.10.0-browsers
    steps:
      - attach_workspace:
          at: /home/circleci
      - run: curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      - run: sudo apt-get install gconf-service libasound2 libatk1.0-0 libcups2 libdbus-1-3 libgconf-2-4 libgtk-3-0 libnspr4 libxcomposite1 lsb-release
      - run: sudo dpkg -i google-chrome.deb
      - run: sudo sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox|g' /opt/google/chrome/google-chrome
      - run: rm google-chrome.deb
      - run: cd frontend; rm -f yarn.lock && yarn
      - run: sudo npm install -g protractor;
      - run: cd frontend; yarn run lint;
      - run: cd frontend; yarn run test:ci;
      - run: cd frontend; yarn run e2e:ci;

  ui_deployment:
    <<: *container_config
    docker:
      - image: circleci/node:7.10.0-browsers
    steps:
      - attach_workspace:
          at: /home/circleci
      - run: cd frontend; rm -f yarn.lock && yarn
      - run: cd frontend; yarn run build;
      - run: sudo apt-get install python-dev
      - run: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
      - run: unzip awscli-bundle.zip
      - run: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run: aws s3 sync frontend/dist s3://qpp-conversion-tool-ui --delete

  signal_success:
    <<: *container_config
    docker:
      - image: circleci/node:7.10.0-browsers
    steps:
      - attach_workspace:
          at: /home/circleci
      - run: sudo apt-get install jq
      - run: ./tools/bin/signal_success.sh

workflows:
  version: 2
  commit:
    jobs:
      - checkout
      - build:
          requires:
            - checkout
      - ui_test:
          requires:
            - checkout
      - deploy_api:
          requires:
            - build
      - integration_test:
          requires:
            - deploy_api
      - ui_deployment:
          filters:
            branches:
              only: ui_deployment
          requires:
            - ui_test
      - signal_success:
          requires:
            - deploy_api
            - ui_test

